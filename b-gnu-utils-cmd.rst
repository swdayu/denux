辅助开发工具
============

AR归档
-------

用法： ::

    ar [-X32_64] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin name]
       [--target bfdname] [--output dirname]
       [--record-libdeps lib-deps] [--thin] [relpos] [count]
       archive [member...]

    ar -M [ <mri-script ]

GNU AR程序用于创建、修改、和解压归档文件，归档文件是用单个文件来收集其他多个文件，它维
护着一种结构可以方便从中获取独立的单个原始文件。原始文件的内容、模式或权限、时间戳、所有
者、和组信息都会被保留，并且可以解压还原。

ar常用来打包库文件，由于库文件常常有依赖关系，ar可以通过--record-libdeps选项来记录一个
库的依赖。ar通过修饰符s可以创建符号的索引，如果创建了索引，当归档文件有修改时索引同时也
会更新。有索引的归档文件可以加快库文件的链接，并且允许库文件里面的函数相互调用而无需考虑
它们的位置。可以使用nm -s或者nm --print-armap来打印这个索引表格。如果一个归档文件每个
这个索引，可以使用ranlib工具来添加。

ar可以可选的创建一个轻量文件（thin archive），这种文件只包含符号索引和原始归档文件中成
员文件的引用。这在本地创建库文件构建树时很有用，这样既可以保证可重定位对象的可用，又不需
要浪费时间和空间来每个对象的内容。一个归档文件只能是轻量文件或者正常文件，不能两者同时存
在。一个归档在创建后它的格式就不能够修改了，除非删除它然后重新创建。轻量文件跟正常文件一
样是扁平的（flattened），当添加一个轻量归档文件到另一个轻量归档文件中时，不会形成嵌套，
而是其中的所有元素都会单独添加到第二个归档文件中。

归档文件中元素的路径，保存的都是相对于归档文件自身目录的相对路径。另外，ar的设计可以兼
容两种不同的使用方式，你可以使用命令行选项的方式，或者通过选项-M使用标准输入提供的MRI脚
本来控制ar程序。

**命令行方式**

命令行方式，ar至少需要提供两个参数，一个是操作模式及其修饰符[-]p[mod]，另一个是归档文
件的名称。在命令的第一参数中，ar允许你用任意的顺序来混用操作模式和它的修饰字符，如果你
需要你可以在操作模式的前面添加一个横杠字符。操作模式用来指定执行哪种操作，可以是下面的
任何一个值，但只能指定其中的一个值：

*d*
    从归档文件中删除模块，要删除的模块使用member...来指定，如果没有指定要删除的内容，
    归档文件不会被修改。如果添加了v修饰符，会打印每个删除的模块。
*m*
    在归档文件中移动成员文件，归档文件中成员文件的顺序会影响程序怎样链接库文件，例如
    如果一个符号在多个成员文件中都定义了。如果没有其他修饰符号和m一起使用，所有指定的
    成员文件会移动到归档文件最后，可以使用a/b/i等修饰符指定成员文件移动的位置。
*p*
    复制归档文件中成员文件的内容，然后打印到标准输出。如果指定了v修饰符，在打印内容前
    先打印成员文件的名称。如果没有指定成员文件，打印归档文件中的所有成员文件的内容。
*q*
    快速添加文件到尾部，不会检查是否需要替换。修饰符a/b/i对这个操作无效，该操作总是将
    文件添加到尾部。如果设置了修饰符v，会打印每个添加的成员文件。注意GNU ar在这种快速
    模式下，还是会更新符号的索引表。另外，GNU ar将qs视为与r模式等价，即替换已经存在的
    文件，并将新文件添加到尾部。
*r*
    将成员文件插入到归档文件中，如果有文件已经存在则会进行替换，也即相同名称的成员文件
    首先会被删除。如果要加入的成员文件找不到，ar会报错并且归档文件中的同名文件不会被移
    除。默认成员文件会添加到尾部，可以使用a/b/i修饰符指定位置。如果使用了v修饰符，则会
    打印每个插入的文件名称，并且用a或者r说明这个文件是直接追加的还是进行替换的。
*s*
    给归档文件添加符号索引，或者更新索引列表。注意这个操作也可以是修饰符，两种情况它都
    是相同的含义。执行ar s类似于使用ranlib工具。
*t*
    打印一个列表列出归档文件的内容，或者成员文件的内容。正常只显式成员文件的名称，但如
    果指定了修饰符O则会打印每个成员对应的偏移。如果要查看模式或权限、时间戳、所有者、
    组信息、文件大小等内容，需要加上v修饰符。如果没有指定成员，所有文件都会被打印。如
    果归档文件中一个同名文件有多个，只会打印第一个，如果要看所有的同名文件，只能打印查
    看真个归档文件。
*x*
    解压文件，如果使用了v修饰符，会打印每个解压的文件。如果没有指定成员文件，会解压所
    有文件。不能从轻量文件中解压除成员文件，而且对用P修饰符创建的归档文件进行解压有一
    些限制，指定的路径不能是绝对路径，并且不能包含..，路径中的任何子目录都必须存在。如
    果想要避免这种限制，可以使用--output选项提供一个输出目录。

操作的修饰符：

*a*
    在某个存在的成员文件之后添加新文件，使用修饰符a，必须在relpos参数中指定存在的成员
    文件名称。
*b*
    在某个存在的成员文件之前添加新文件，必须在relpos参数中指定存在的成员文件名称。这个
    修饰符与修饰符i有相同的含义。
*c*
    创建归档文件，当归档文件不存在时会创建归档文件。当你进行更新时，如果归档文件不存
    在，总是创建会这个归档文件，不同的是使用该修饰符不会产生警告。
*D*
    在添加文件时使用全零的UID、GID、和时间戳，并且对所有文件使用一致的文件模式。当使用
    相同的ar命令选项时，输出的文件都是一致的，不管输入文件的所有者、组名称、文件模式、
    或者修改时间是否一样。如果binutils在创建时使用了
    --enable-deterministic-archives，那么这个修饰符会被默认打开，你可以使用修饰符U
    来关闭这个选项。
*U*
    在添加文件和索引时，使用实际的UID、GID、和时间戳，以及文件模式。这个修饰符默认被打
    开，除非binutils在创建时添加了--enable-deterministic-archives选项。
*f*
    如果文件名太长会进行截断，正常情况下GNU ar允许任何长度的文件名。但是如果想与某些有
    文件名长度限制的系统兼容，可以添加这个修饰符。
*l*
    用链接工具相同的语法指定这个库文件的依赖，但是这个修饰符不被使用了。
*N*
    使用参数count，当一个成员文件名称在归档文件中有多个时，可以使用count指定对那个成
    员文件进行操作，例如在解压和删除操作时。
*o*
    当解压文件时，保留文件原始的时间，如果不使用这个修饰符，那么解压出来的文件的时间戳
    时加压时的时间戳。
*O*
    与操作t一起使用，显示成员在归档文件内的偏移位置。
*P*
    使用全路径匹配和存储文件名称，当使用不带P的ar修改这种文件时会移除名字的全路径，除
    非是一个轻量文件。使用P可以防止相同名称但不同目录的文件被替换，例如下面使用r操作但
    没有搭配P修饰符，最后一个文件file1会把subdir/file1替换掉，因为r默认在替换文件时
    不会考虑目录: ar rcST archive.a subdir/file1 subdir/file2 file1
*s*
    添加或者更新符号的索引，可以与任何操作搭配使用，或者单独使用。执行命令'ar s'等价与
    命令ranlib。
*S*
    不产生符号的索引列表，这可以加快库的构建速度，但是最后的归档文件不能用于链接。为了
    生成符号索引，在最后一次使用ar时必须去掉这个修饰符，或者你必须在归档文件上执行
    ranlib。
*T*
    是选项--thin的别名，已经过时。不再推荐使用这个修饰符，因为很多ar的实现版本中T有不
    同的含义，像X/Open System Interface。
*u*
    仅搭配r操作使用，仅当新添加的文件比已经存在的文件新时才替换对应的文件，否则保留原
    来的文件。另外使用qu时不允许的，因为检查时间戳有违加速添加的准则。如果归档文件是
    使用修饰符D添加的，那么修饰符u将失去意义，新添加的文件总会被添加。
*v*
    打印额外的信息。
*V*
    打印ar版本信息。
*@file*
    从一个文件中读取命令选项。

命令选项：

*-X32_64*
    GNU ar为了兼容AIX使用了这个选项，这个选项是GNU ar默认的行为，也不支持其他值，AIX
    ar的默认值-X32也不支持。GNU ar会忽略掉这个初始选项。
*--plugin name*
    让ar加载一个名为name的链接插件，用于支持更多的文件格式，例如包含有优化链接时间的目
    标文件。这个选项仅当工具链在创建时打开了支持插件的选项。如果没添加这个选项，但是ar
    打开了支持插件的功能，它会以字母顺序遍历${libdir}/bfd-plugins中的文件，查找合适
    的来使用。为了让ar使用到链接插件，相关的文件需要拷贝到上面的文件夹下。GCC兼容的链
    接插件对应的名称为liblto_plugin.so.0.0.0，CLANG的则为LLVMgold.so。因为GCC插件
    总是会兼容老版本，因此只要拷贝最新版本就行。
*--target bfdname*
    指定归档文件中成员文件使用object code格式，而不是你的系统的默认格式。
*--output dirname*
    指定解压文件时的输出目录，如果不指定则使用当前目录。
*--record-libdeps libdeps*
    仅用于l修饰符，处理长参数值的情况。
*--thin*
    将归档文件创建为轻量的归档文件。如果对应的归档文件是一个存在的正常归档文件，其中的
    成员文件的路径必须都与这个归档文件在相同的目录下。

**MRI脚本方式**

使用ar -M [ <mri-script ]方式执行，如果没有提供脚本，ar会进入交互
模式，即AR >提示模式，从终端获取输入，如果标准输入重定向到了一个
脚本文件或者一个管道，那么会从文件或管道读取输入。

脚本方式并不等价于命令行方式，实际上脚本模式提供了更少的控制，这个
模式仅仅为了方便原来已经编写了脚本的开发人员使用。

ar的脚本语言相关语法如下：
1. 命令可以是大写或者小写
2. 单个命令可以出现在一行中，这是行的第一个单词
3. 空行是允许的，不产生任何效果
4. 用*或者;字符开始的注释，注释会被忽略
5. 当参数的值有多个时，可以用空白字符或者逗号进行分隔
6. 使用+和换行符进行续行

脚本的命令如下，其中OPEN和CREATE指定当前归档文件，SAVE会保存当前的
对归档文件的修改，在SAVE之前对归档文件的修改都只发生在临时拷贝上。

*ADDLIB archive, ADDLIB archive (module,...)*
    将整个归档文件或其中的一些成员文件添加到当前文件中。必须先调用OPEN或者CREATE。
*ADDMOD member,...*
    将成员文件添加到当前归档文件中。需要先调用OPEN或者CREATE。
*CLEAR*
    清掉上次SAVE以来的所有操作。
*CREATE archive*
    创建一个归档文件作为当前文件，如果对用名称的文件已经存在，在SAVE之后，这个文件会被
    新文件覆盖。
*DELETE module,...*
    从当前文件中删除对应的成员文件。需要先调用OPEN或者CREATE。
*DIRECTORY archive (module,...), DIRECTORY archive (module,...) outputfile*
    打印归档文件中成员的信息，如果VERBOSE没有打开相当于ar -t archive moudle...，如
    果打开了VERBOSE相当于ar -tv archive module...。打印正常会输出到标准输出，但是
    可以指定一个输出文件。
*VERBOSE*
    打开和关闭是否在执行DIRECTORY命令时，打印额外的信息。
*END*
    退出ar，返回0表示成功。这个命令不会保存对文件的修改，如果没有执行SAVE，对文件的修
    改会丢失。
*EXTRACT module,...*
    解压当前归档文件中的成员文件到当前目录，需要先调用OPEN或者CREATE。
*LIST*
    列出当前归档文件所有成员的信息，会打印额外信息，不管VERBOSE是否打开。相当于执行
    ar -tv archive。需要先调用OPEN或者CREATE。
*OPEN archive*
    打开一个已经存在的归档文件作为当前文件。
*REPLACE module,...*
    用当前目录下的文件替换当前归档文件中的成员文件，为了避免出错，当前目录下的文件和归
    档文件中的对应成员都必须存在。需要先调用OPEN或者CREATE。
*SAVE*
    保存对当前归档文件的修改，需要先调用OPEN或者CREATE。

ranlib
-------

用法： ::

    ranlib [--plugin name] [-DhHvVt] archive
    ranlib --version
    ranlib --help

工具 ranlib 可以在归档文件中生成符号的索引列表。你可以使用 nm -s 或者
nm --print-armap 打印这个索引列表。这个列表列出了归档文件中每个成员文件定义的每个符
号，这个成员文件是可重定位的目标文件。

拥有索引列表的归档文件，可以加快对这个库的链接速度，并且允许库中的函数不需要考虑位置的
情况下相互调用。GNU ranlib 是 GNU ar 的一种形式，执行 ranlib 等价于执行 ar -s。

支持的命令选项如下：

*@file*
    从文件获取命令选项
*--plugin name*
    加载链接插件
*-h -H --help*
    显式帮助信息
*-v -V --version*
    打印版本信息
*-D*
    成员文件的头部信息使用全零的UID、GID、时间戳、已经文件模式，与ar的D修饰符一样。
*-U*
    成员文件的头部信息使用真实的UID、GID、时间戳、以及文件模式，与ar的U修饰符一样。
*-t*
    更新符号索引的时间戳
